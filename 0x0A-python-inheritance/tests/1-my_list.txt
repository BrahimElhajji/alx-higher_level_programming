How to Use my_list_module.py
============================

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, returning an empty list:

::

    >>> MyList = __import__('my_list_module').MyList
    >>> custom_list = MyList()
    >>> type(custom_list)
    <class 'my_list_module.MyList'>

::

    >>> print(custom_list)
    []

Or with a single argument, which must be an iterable object.

::

    >>> custom_list = MyList([1, 2, 3])
    >>> print(custom_list)
    [1, 2, 3]

::

    >>> custom_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for any more than one instantiation argument.

::

    >>> custom_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Usage
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

    >>> custom_list = MyList()
    >>> custom_list.append(3)
    >>> custom_list.append(6)
    >>> custom_list.append(9)
    >>> print(custom_list)
    [3, 6, 9]

Replaced with indexing:

::

    >>> custom_list[0] = 5
    >>> print(custom_list)
    [3, 6, 9]

And removed with the ``remove()`` method.

::

    >>> custom_list.remove(5)
    >>> print(custom_list)
    [7, 4]

See the documentation on Python lists for more built-in methods.

``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

    >>> custom_list = MyList()
    >>> print(custom_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is
provided.

::

    >>> custom_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

::

    >>> custom_list.append(1)
    >>> custom_list.append(4)
    >>> custom_list.append(2)
    >>> custom_list.append(3)
    >>> custom_list.append(5)
    >>> print(custom_list)
    [1, 4, 2, 3, 5]

::

    >>> custom_list.print_sorted()
    [1, 2, 3, 4, 5]

The order of the original list is not altered after a call to the method.

::

    >>> print(custom_list)
    [1, 2, 6, 3, 5]

Note that lists of strings are sorted lexographically.

::

    >>> custom_list = MyList()
    >>> custom_list.append("Banana")
    >>> custom_list.append("lovely")
    >>> custom_list.append("anfa")
    >>> custom_list.append("Python")
    >>> custom_list.append("kechkech")
    >>> print(custom_list)
    ['Banana', 'lovely', 'anfa', 'Python', 'kechkech']

::

    >>> custom_list.print_sorted()
    ['kechkech', 'Banana', 'Python', 'lovely', 'anfa']

Another friendly reminder that the original list is unaltered :)

::

    >>> print(custom_list)
    ['Banana', 'lovely', 'anfa', 'Python', 'kechkech']

Nothing to sort with empty lists.

::

    >>> custom_list = MyList()
    >>> custom_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> custom_list = MyList([1, "kechkech", "Python", 8])
    >>> custom_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
