How to use test_base_geometry.txt
=================================

This file provides doctests for the BaseGeometry class.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create an instance of BaseGeometry:
>>> geometry = BaseGeometry()

Try calling the area() method:
>>> geometry.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

Try using the integer_validator method with valid input:
>>> geometry.integer_validator("side_length", 5)

Try using the integer_validator method with a non-integer value:
>>> geometry.integer_validator("side_length", "invalid")
Traceback (most recent call last):
  ...
TypeError: side_length must be an integer

Try using the integer_validator method with a negative value:
>>> geometry.integer_validator("side_length", -5)
Traceback (most recent call last):
  ...
ValueError: side_length must be greater than 0

Try using the integer_validator method with a zero value:
>>> geometry.integer_validator("side_length", 0)
Traceback (most recent call last):
  ...
ValueError: side_length must be greater than 0

Try using the integer_validator method with a positive integer:
>>> geometry.integer_validator("side_length", 10)

Try using the integer_validator method with 3 arguments:
>>> geometry.integer_validator("side_length", 5, "extra")
Traceback (most recent call last):
  ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

Try using the integer_validator method with an infinite integer:
>>> geometry.integer_validator("side_length", float('inf'))
Traceback (most recent call last):
  ...
ValueError: side_length must be a finite integer

Tests from 7-base_geometry module:
===================================

Using BaseGeometry
------------------

Import function from module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Correct Class Type test:
>>> geometry = BaseGeometry()
>>> type(geometry) == BaseGeometry
True

area() instance method
----------------------
area method is an instance method:
>>> type(BaseGeometry.__dict__['area'])
<class 'function'>

area method called via class with no args:
>>> geometry.__class__.area()
Traceback (most recent call last):
  TypeError: area() missing 1 required positional argument: 'self'

area method args test (1 arg):
>>> geometry.area(10)
Traceback (most recent call last):
  TypeError: area() takes 1 positional argument but 2 were given

area method normal test:
>>> geometry.area()
Traceback (most recent call last):
  Exception: area() is not implemented

integer_validator() instance method
-----------------------------------
integer_validator is an instance method:
>>> type(BaseGeometry.__dict__['integer_validator'])
<class 'function'>

integer_validator method called via class with no args:
>>> geometry.__class__.integer_validator()
Traceback (most recent call last):
  TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

integer_validator method arg test (0 args):
>>> geometry.integer_validator()
Traceback (most recent call last):
  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

integer_validator method arg test (3 args):
>>> geometry.integer_validator(1, 1, 1)
Traceback (most recent call last):
  TypeError: integer_validator() takes 3 positional arguments but 4 were given

integer_validator method float.0 value:
>>> geometry.integer_validator("foo", 3.0)
Traceback (most recent call last):
  TypeError: foo must be an integer

integer_validator method float.x value:
>>> geometry.integer_validator("arg", 3.14)
Traceback (most recent call last):
  TypeError: arg must be an integer

integer_validator method string value:
>>> geometry.integer_validator("Bar", "bar")
Traceback (most recent call last):
  TypeError: Bar must be an integer

integer_validator method bool value:
>>> geometry.integer_validator("zar", True)
Traceback (most recent call last):
  TypeError: zar must be an integer

integer_validator method list value:
>>> geometry.integer_validator("a", [1])
Traceback (most recent call last):
  TypeError: a must be an integer

integer_validator method None value:
>>> geometry.integer_validator("foo", None)
Traceback (most recent call last):
  TypeError: foo must be an integer

integer_validator method 0 value:
>>> geometry.integer_validator("key", 0)
Traceback (most recent call last):
  ValueError: key must be greater than 0

integer_validator method negative value:
>>> geometry.integer_validator("key", -1000)
Traceback (most recent call last):
  ValueError: key must be greater than 0

integer_validator method ok value:
>>> geometry.integer_validator("key", 98)

integer_validator method ok value 2:
>>> geometry.integer_validator("key", 1)

integer_validator method empty string:
>>> geometry.integer_validator("", 1)

integer_validator method empty string:
>>> geometry.integer_validator(None, 1)

integer_validator method tuple:
>>> geometry.integer_validator("Foo", (1, 2))
Traceback (most recent call last):
  TypeError: Foo must be an integer

integer_validator method dic:
>>> geometry.integer_validator("Foo", {1, 2})
Traceback (most recent call last):
  TypeError: Foo must be an integer

